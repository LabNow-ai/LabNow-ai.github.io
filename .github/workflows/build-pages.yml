name: Build frontend site and deploy to GitHub Pages

on:
    push:  # Runs on pushes targeting the default branch
        branches: ['main']
    pull_request:  # Runs on pull requests that targeting the default branch
        branches: ['main']
    workflow_dispatch:  # Allows you to run this workflow manually from the Actions tab

permissions:  # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: 'pages'
    cancel-in-progress: false

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                repository: ${{ vars.SRC_GITHUB_REPO }}
                token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
                lfs: true
            - uses: pnpm/action-setup@v4
              with:
                version: 10
            - id: detect-package-manager
              run: |
                  set -ex && pwd && ls -alh
                  if [ -f "${{ github.workspace }}/package-lock.json" ]; then
                    echo "manager=npm" >> $GITHUB_OUTPUT  && echo "command=install" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
                    echo "manager=pnpm" >> $GITHUB_OUTPUT && echo "command=install" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "manager=yarn" >> $GITHUB_OUTPUT && echo "command=install" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "Unable to determine package manager"
                    exit 1
                  fi
            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: ${{ steps.detect-package-manager.outputs.manager }}
            - uses: actions/configure-pages@v5
              with:
                  # Automatically inject basePath in your Next.js configuration file and disable
                  # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
                  # You may remove this line if you want to manage the configuration yourself.
                  static_site_generator: next
            - uses: actions/cache@v4
              with:
                  path: |
                      .next/cache
                  # Generate a new cache whenever packages or source files change.
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
                  # If source files changed but packages didn't, rebuild from a prior cache.
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
            - name: Build FED
              run: ${{ steps.detect-package-manager.outputs.manager }} run build
            - name: Create CNAME file
              run: |
                echo "Generate CNAME file"
                echo ${{ vars.CNAME }} > ./out/CNAME
            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./out

    deploy:  # Deployment job
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        needs: build
        steps:
            - id: deployment
              uses: actions/deploy-pages@v4
